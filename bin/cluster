#!/usr/bin/env bash

ACTION=${1:-"create"}
# set max cores to count of available cores
MAX_CORES=$(sysctl -n hw.ncpu)
# set max ram to 75% of available memory
MAX_RAM=$(( $(sysctl -n hw.memsize) / $((1024**3)) / 4 * 3 ))
PROFILE=k8s-finbotsdev
PROJECT_ROOT=$(git rev-parse --show-toplevel)

# tell dns resolver to use minikube as nameserver for any .lo domains
function dnsresolver() {
  sudo rm /etc/resolver/minikube-$PROFILE

    cat << EOF | sudo tee -a /etc/resolver/minikube-$PROFILE
domain lo
nameserver $(minikube ip --profile=$PROFILE)
search_order 1
timeout 5
EOF
}

# extend minikube dns config to forward dns requests for .lo domain to minikube ip address
function dnsconfig() {
    cat <<EOF | kubectl apply --filename -
---
apiVersion: v1
data:
  Corefile: |
    .:53 {
        errors
        health {
           lameduck 5s
        }
        ready
        kubernetes cluster.local in-addr.arpa ip6.arpa {
           pods insecure
           fallthrough in-addr.arpa ip6.arpa
           ttl 30
        }
        prometheus :9153
        hosts {
           192.168.64.1 host.minikube.internal
           fallthrough
        }
        forward . /etc/resolv.conf {
           max_concurrent 1000
        }
        cache 30
        loop
        reload
        loadbalance
    }
    lo:53 {
        errors
        cache 30
        forward . $(minikube ip --profile=$PROFILE)
    }
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
EOF
}

case $ACTION in
  create)

    minikube start \
      --cpus="$MAX_CORES" \
      --disk-size='100g' \
      --driver='hyperkit' \
      --kubernetes-version='stable' \
      --memory="${MAX_RAM}g" \
      --nodes=1 \
      --profile="$PROFILE"

    # running multiple nodes can have issues with pv permissions
    # https://github.com/kubernetes/minikube/issues/12360

    minikube addons enable ingress --profile="$PROFILE"
    minikube addons enable ingress-dns --profile="$PROFILE"

    dnsresolver

    # reload resolver config
    sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
    sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist

    dnsconfig

    # Create Private Certificate Signing Authority
    "$HOME"/bin/ca

    # Install certificate manager
    make -C "${PROJECT_ROOT}/services/cert-manager" deploy

    # Install metrics server
    make -C "${PROJECT_ROOT}/services/metrics-server" deploy

    # Install Kubernetes Dashboard
    make -C "${PROJECT_ROOT}/services/kubernetes-dashboard" deploy

    # Install Postgres Database
    make -C "${PROJECT_ROOT}/services/postgresql" deploy

    # Install Keycloak Operator
    kubectl create ns keycloak-operator
    kubectl apply -f manifests/keycloak-operator/keycloaks.k8s.keycloak.org-v1.yml
    kubectl apply -f manifests/keycloak-operator/keycloakrealmimports.k8s.keycloak.org-v1.yml
    kubectl apply -n keycloak-operator -f manifests/keycloak-operator/operator.yaml

    kubectl create secret generic keycloak-db-secret \
      --from-literal=username=keycloak \
      --from-literal=password=p@s5w0rd \
      -n keycloak-operator

    kubectl apply -n keycloak-operator -f manifests/keycloak-operator/keycloak.yaml
    ;;
  dnstest)
    # example deployment for hello john and hallo jane apps
    kubectl apply --filename="${PROJECT_ROOT}/manifests/dns-resolver-test.yaml"

    # test ns lookups directly to minikube
    nslookup hello-john.lo $(minikube ip --profile=$PROFILE)
    nslookup hello-jane.lo $(minikube ip --profile=$PROFILE)

    # test ns lookups from host machine using curl
    curl http://hello-john.lo
    curl http://hello-jane.lo
    ;;
  dashboard)
    echo "use this token to access the dashboard"
    kubectl -n kubernetes-dashboard create token dashboard-admin
    open https://kubernetes-dashboard.lo/
    ;;
  delete|destroy|ip|pause|ssh|start|stop|tunnel|unpause)
    minikube "$ACTION" --profile="$PROFILE"
    ;;
  *)
    echo "unrecognied action"
    exit 0
    ;;
esac
